generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id           String         @id @default(uuid())
  clerkId      String         @unique
  firstName    String
  lastName     String
  username     String         @unique
  email        String         @unique
  profileImage String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  favorites    Favorite[]
  foods        Food[]
  activities   UserActivity[]
  table        Table[]
  orders       Order[]
}

model Food {
  id          String     @id @default(uuid())
  name        String
  description String
  image       String
  price       Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  profileId   String

  favorites   Favorite[]
  profile     Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  orders       Order[]
}

model Favorite {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profileId String
  foodId    String
  food      Food     @relation(fields: [foodId], references: [id], onDelete: Cascade)
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model UserActivity {
  id        String   @id @default(uuid())
  profileId String
  loginAt   DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Table {
  id              String   @id @default(uuid())
  tableNumber     String   @unique
  seatingCapacity Int
  availableDate   DateTime
  reservedById    String?    // ✅ อ้างอิง User ที่จอง
  reservedAt      DateTime? // ✅ วันที่จอง
  createdAt       DateTime @default(now())

  profile   Profile? @relation(fields: [reservedById], references: [id], onDelete: SetNull)
}

model Order {
  id          String   @id @default(uuid()) // รหัสออเดอร์
  userId      String   // รหัสโปรไฟล์ของผู้ใช้
  foodId      String   // รหัสของอาหารที่สั่ง
  quantity    Int      // จำนวนที่สั่ง
  totalPrice  Int      // ราคาทั้งหมด
  createdAt   DateTime @default(now()) // วันที่สั่ง

  user  Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
  food  Food    @relation(fields: [foodId], references: [id], onDelete: Cascade)
}
