"use server";

import {
  foodSchema,
  imageSchema,
  profileSchema,
  ValidateEithZode,
} from "@/utils/schemas";
import { auth, clerkClient, currentUser } from "@clerk/nextjs/server";
import { prisma } from "@/lib/prisma";
import { redirect } from "next/navigation";
import { uploadFile } from "@/utils/supabase";
import { revalidatePath } from "next/cache";
// import { PrismaClient } from "@prisma/client";

// import { date } from "zod";
// import { profile } from "console";

const getAuthUser = async () => {
  const user = await currentUser();
  if (!user) {
    throw new Error("You must logged!!!");
  }
  if (!user.privateMetadata.hasProfile) redirect("/profile/create");
  return user;
  
};

const renderError = (error: unknown): { message: string } => {
  return {
    message: error instanceof Error ? error.message : "An Error!!!",
  };
};

export const createProfileAction = async (
  prevState: unknown,
  formData: FormData
) => {
  try {
    const user = await currentUser();
    if (!user) throw new Error("Please Login");

    const rawData = Object.fromEntries(formData);
    const validateField = ValidateEithZode(profileSchema, rawData);
    // console.log("validated", validateField);

    await prisma.profile.create({
      data: {
        clerkId: user.id,
        email: user.emailAddresses[0].emailAddress,
        profileImage: user.imageUrl ?? "",
        firstName: validateField.firstName,
        lastName: validateField.lastName,
        username: validateField.userName,
      },
    });
    const client = await clerkClient();
    await client.users.updateUserMetadata(user.id, {
      privateMetadata: {
        hasProfile: true,
      },
    });

    // return { message: "Create Profile Success!!!" };
  } catch (error) {
    // console.log(error);
    return renderError(error);
  }
  redirect("/");
};

export const AddFoodAction = async (
  prevState: unknown,
  formData: FormData
): Promise<{ message: string }> => {
  try {
    const user = await getAuthUser();

    // ‚úÖ ‡∏î‡∏∂‡∏á `profileId` ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `clerkId`
    const profile = await prisma.profile.findUnique({
      where: { clerkId: user.id }, // ‡πÉ‡∏ä‡πâ clerkId ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö profileId
      select: { id: true }
    });

    if (!profile) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£");
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
    const rawData = Object.fromEntries(formData);
    const file = formData.get("image") as File;

    const validatedFile = ValidateEithZode(imageSchema, { image: file });
    const validateField = ValidateEithZode(foodSchema, rawData);

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Supabase
    const fullPath = await uploadFile(validatedFile.image);
    console.log("üü¢ Uploaded image path:", fullPath);

    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `profile.id`
    await prisma.food.create({
      data: {
        name: validateField.name,
        price: validateField.price,
        description: validateField.description,
        image: fullPath,
        profileId: profile.id, // ‚úÖ ‡πÉ‡∏ä‡πâ `profile.id` ‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÅ‡∏ó‡∏ô user.id
      },
    });

    // return { message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!" };
  } catch (error) {
    console.error("üî¥ Error in AddFoodAction:", error);
    return renderError(error);
  }
  redirect('/Dashboard/add_food')
};


export const DeleteFoodAction = async (
  foodId: string
): Promise<{ message: string }> => {
  try {
    await prisma.food.delete({
      where: { id: foodId },
    });
    return { message: "Delete Food Success!!!" };
  } catch (error) {
    console.error("Error deleting food:", error);
    return renderError(error);
  }
};

export const fetchFoods = async ({ search = "" }: { search?: string }) => {
  const foods = await prisma.food.findMany({
    where: {
      OR: [{ name: { contains: search } }, {}],
    },
    orderBy: {
      createdAt: "desc",
    },
  });
  return foods;
};

export const fetchFavoriteId = async ({ foodId }: { foodId: string }) => {
  const user = await getAuthUser();

  // ‚úÖ ‡∏î‡∏∂‡∏á `profileId` ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `clerkId`
  const profile = await prisma.profile.findUnique({
    where: { clerkId: user.id },
    select: { id: true },
  });

  if (!profile) {
    throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
  }

  const favorite = await prisma.favorite.findFirst({
    where: {
      foodId: foodId,
      profileId: profile.id, // ‚úÖ ‡πÉ‡∏ä‡πâ `profile.id` ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    },
    select: {
      id: true,
    },
  });

  return favorite?.id || null;
};


export const toggleFavoriteAction = async (prevState: {
  favoriteId: string | null;
  foodId: string;
  pathname: string;
}) => {
  try {
    const user = await getAuthUser();

    // ‚úÖ ‡∏î‡∏∂‡∏á `profileId` ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `clerkId`
    const profile = await prisma.profile.findUnique({
      where: { clerkId: user.id },
      select: { id: true },
    });

    if (!profile) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô");
    }

    if (prevState.favoriteId) {
      await prisma.favorite.delete({
        where: {
          id: prevState.favoriteId,
        },
      });
    } else {
      await prisma.favorite.create({
        data: {
          foodId: prevState.foodId,
          profileId: profile.id, // ‚úÖ ‡πÉ‡∏ä‡πâ `profile.id` ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡∏ô Clerk ID
        },
      });
    }

    revalidatePath(prevState.pathname);
    return {
      message: prevState.favoriteId ? "Remove Favorite Success" : "Add Favorite Success",
    };
  } catch (error) {
    console.error("üî¥ Error in toggleFavoriteAction:", error);
    return renderError(error);
  }
};


export const fetchFavorite = async () => {
  try {
    const user = await getAuthUser();

    // ‚úÖ ‡∏î‡∏∂‡∏á `profileId` ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `clerkId`
    const profile = await prisma.profile.findUnique({
      where: { clerkId: user.id },
      select: { id: true },
    });

    if (!profile) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô");
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Favorite ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ `profile.id`
    const favorites = await prisma.favorite.findMany({
      where: {
        profileId: profile.id, // ‚úÖ ‡πÉ‡∏ä‡πâ `profile.id` ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡∏ô `user.id`
      },
      select: {
        food: {
          select: {
            id: true,
            name: true,
            description: true,
            image: true,
            price: true,
          },
        },
      },
    });

    return favorites.map((favorite) => favorite.food);
  } catch (error) {
    console.error("üî¥ Error in fetchFavorite:", error);
    return [];
  }
};


export const fetchFoodsdetail = async ({ id }: { id: string }) => {
  return prisma.food.findFirst({
    where: {
      id,
    },
    include: {
      profile: true,
    },
  });
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞
export async function addTable(tableNumber: string, seatingCapacity: number, availableDate: string) {
  try {
      const parsedDate = new Date(availableDate);

      if (!tableNumber || !seatingCapacity || isNaN(parsedDate.getTime())) {
          throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      }

      const newTable = await prisma.table.create({
          data: { tableNumber, seatingCapacity, availableDate: parsedDate }
      });

      return { success: true, data: newTable };
  } catch (error: unknown) {
      if (error instanceof Error) {
          return { success: false, error: error.message };
      }
      return { success: false, error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏î‡πâ' };
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏•‡∏ö‡πÇ‡∏ï‡πä‡∏∞
export async function deleteTable(tableId: string) {
    try {
        const deletedTable = await prisma.table.delete({
            where: { id: tableId }
        });

        return { success: true, data: deletedTable };
    } catch (error: unknown) {
        if (error instanceof Error) {
            return { success: false, error: error.message };
        }
        return { success: false, error: 'An unknown error occurred' };
    }
}

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export async function getTables() {
  try {
      const tables = await prisma.table.findMany();
      return { success: true, data: tables };
  } catch (error: unknown) {
      if (error instanceof Error) {
          return { success: false, error: error.message };
      }
      return { success: false, error: 'An unknown error occurred' };
  }
}

export const fetchFavoriteStats = async () => {
  try {
    const favoriteStats = await prisma.favorite.groupBy({
      by: ["foodId"],
      _count: { foodId: true },
      orderBy: { _count: { foodId: "desc" } },
    });

    // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const foodData = await prisma.food.findMany({
      where: {
        id: { in: favoriteStats.map((fav) => fav.foodId) }
      },
      select: {
        id: true,
        name: true
      }
    });

    // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const result = favoriteStats.map((fav) => ({
      foodName: foodData.find((food) => food.id === fav.foodId)?.name || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠",
      favoriteCount: fav._count.foodId
    }));

    return { success: true, data: result };
  } catch (error) {
    console.error("üî¥ Error fetching favorite stats:", error);
    return { success: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Favorite ‡πÑ‡∏î‡πâ" };
  }
};

export async function logUserActivity() {
  try {
    console.log("üìå Checking logged-in user...");

    const session = await auth(); // ‚úÖ ‡πÉ‡∏ä‡πâ await ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const userId = session.userId; // ‚úÖ ‡∏î‡∏∂‡∏á userId ‡∏à‡∏≤‡∏Å session

    if (!userId) {
      console.log("‚ùå User not logged in.");
      return { error: "Unauthorized" };
    }

    console.log("‚úÖ Logged-in userId:", userId);

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Profile ‡∏à‡∏≤‡∏Å Clerk userId
    const profile = await prisma.profile.findUnique({
      where: { clerkId: userId },
    });

    if (!profile) {
      console.log("‚ùå Profile not found for userId:", userId);
      return { error: "Profile not found" };
    }

    console.log("‚úÖ Profile found:", profile.id, "for user:", userId);

    // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ log ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const today = new Date();
    today.setHours(0, 0, 0, 0);

    const existingLog = await prisma.userActivity.findFirst({
      where: {
        profileId: profile.id,
        loginAt: {
          gte: today, // ‚úÖ ‡∏î‡∏∂‡∏á log ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        },
      },
    });

    if (existingLog) {
      console.log("üîÑ User already logged today. Skipping...");
      return { message: "User already logged today" };
    }

    console.log("üÜï Logging new UserActivity...");
    await prisma.userActivity.create({
      data: {
        profileId: profile.id,
        loginAt: new Date(),
      },
    });

    console.log("‚úÖ User activity logged successfully for user:", userId);
    return { message: "User activity logged successfully" };

  } catch (error) {
    console.error("‚ùå Error logging user activity:", error);
    return { error: "Internal Server Error" };
  }
}

export async function reserveTable(tableId: string) {
  try {
    const user = await getAuthUser();
    if (!user) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");

    console.log("üü¢ User ID:", user.id); // Clerk ID
    console.log("üü¢ Table ID:", tableId);

    // ‚úÖ ‡∏î‡∏∂‡∏á `profileId` ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const profile = await prisma.profile.findUnique({
      where: { clerkId: user.id }, // ‡πÉ‡∏ä‡πâ Clerk ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ Profile ID
      select: { id: true }
    });

    if (!profile) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Å‡πà‡∏≠‡∏ô");

    console.log("üü¢ Profile ID:", profile.id); // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á `profileId`

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÇ‡∏ï‡πä‡∏∞‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const existingTable = await prisma.table.findUnique({
      where: { id: tableId },
      select: { reservedById: true }
    });

    console.log("üîµ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:", existingTable);

    if (!existingTable) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ");
    if (existingTable.reservedById) throw new Error("‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß");

    // ‚úÖ ‡πÉ‡∏ä‡πâ `profile.id` ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    const updatedTable = await prisma.table.update({
      where: { id: tableId },
      data: { reservedById: profile.id, reservedAt: new Date() }
    });

    console.log("‚úÖ ‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", updatedTable);
    return { success: true, data: updatedTable };
  } catch (error) {
    console.error("üî¥ Error reserving table:", error);
    return { success: false, error: error instanceof Error ? error.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏î‡πâ" };
  }
}


// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
export async function cancelReservation(tableId: string) {
  try {
    const user = await getAuthUser();

    // ‚úÖ ‡∏î‡∏∂‡∏á `profileId` ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const profile = await prisma.profile.findUnique({
      where: { clerkId: user.id }, // ‡πÉ‡∏ä‡πâ Clerk ID ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ Profile ID
      select: { id: true }
    });

    if (!profile) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");

    console.log("üü¢ Profile ID:", profile.id);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ User ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const table = await prisma.table.findUnique({
      where: { id: tableId },
      select: { reservedById: true }
    });

    console.log("üîµ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å:", table);

    if (!table) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ");
    if (table.reservedById !== profile.id) throw new Error("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ô‡∏µ‡πâ");

    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÇ‡∏ï‡πä‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡πà‡∏≤‡∏á
    const updatedTable = await prisma.table.update({
      where: { id: tableId },
      data: { reservedById: null, reservedAt: null }
    });

    console.log("‚úÖ ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", updatedTable);
    
    revalidatePath("/user/tables"); // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏ô‡πâ‡∏≤
    return { success: true, data: updatedTable };
  } catch (error) {
    console.error("üî¥ Error canceling reservation:", error);
    return { success: false, error: error instanceof Error ? error.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" };
  }
}

export async function fetchReservedTables() {
  try {
    // ‚úÖ ‡∏î‡∏∂‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ username ‡πÅ‡∏•‡∏∞ email ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏à‡∏≠‡∏á
    const reservedTables = await prisma.table.findMany({
      where: { reservedById: { not: null } }, // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á
      include: {
        profile: { select: { username: true, email: true } } // ‚úÖ ‡∏î‡∏∂‡∏á username ‡πÅ‡∏•‡∏∞ email
      },
      orderBy: { reservedAt: "desc" } // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    });

    return { success: true, data: reservedTables };
  } catch (error) {
    console.error("üî¥ Error fetching reserved tables:", error);
    return { success: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ" };
  }
}

export async function fetchReservationsUser() {
  try {
    const user = await getAuthUser();
    if (!user) throw new Error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Profile ‡∏à‡∏≤‡∏Å Clerk ID
    const profile = await prisma.profile.findUnique({
      where: { clerkId: user.id },
      select: { id: true },
    });

    if (!profile) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì");

    // ‚úÖ ‡∏î‡∏∂‡∏á‡πÇ‡∏ï‡πä‡∏∞‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≠‡∏á‡πÑ‡∏ß‡πâ
    const reservations = await prisma.table.findMany({
      where: { reservedById: profile.id },
      select: {
        id: true,
        tableNumber: true,
        seatingCapacity: true,
        reservedAt: true,
      },
      orderBy: { reservedAt: "desc" },
    });

    return { success: true, data: reservations };
  } catch (error) {
    console.error("üî¥ Error fetching user reservations:", error);
    return { success: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡πÇ‡∏ï‡πä‡∏∞‡πÑ‡∏î‡πâ" };
  }
}


export async function orderFood(foodId: string, quantity: number) {
  try {
    const user = await getAuthUser();
    if (!user) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");

    // ‚úÖ ‡∏î‡∏∂‡∏á‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const profile = await prisma.profile.findUnique({
      where: { clerkId: user.id },
      select: { id: true },
    });

    if (!profile) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö");
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏±‡πà‡∏á
    const food = await prisma.food.findUnique({
      where: { id: foodId },
      select: { price: true },
    });

    if (!food) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å");
    }

    const totalPrice = food.price * quantity;

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    const newOrder = await prisma.order.create({
      data: {
        userId: profile.id,
        foodId,
        quantity,
        totalPrice,
      },
    });

    return { success: true, data: newOrder };
  } catch (error) {
    console.error("üî¥ Error ordering food:", error);
    return { success: false, error: error instanceof Error ? error.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏±‡πà‡∏á‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏î‡πâ" };
  }
}



export async function cancelOrder(orderId: string) {
  try {
    const user = await getAuthUser(); // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!user) throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö");

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
    const order = await prisma.order.findUnique({
      where: { id: orderId },
      select: { userId: true },
    });

    if (!order) {
      throw new Error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ");
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const profile = await prisma.profile.findUnique({
      where: { clerkId: user.id },
      select: { id: true },
    });

    if (!profile || order.userId !== profile.id) {
      throw new Error("‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ô‡∏µ‡πâ");
    }

    // ‚úÖ ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await prisma.order.delete({
      where: { id: orderId },
    });

    return { success: true, message: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à" };
  } catch (error) {
    console.error("üî¥ Error canceling order:", error);
    return { success: false, error: error instanceof Error ? error.message : "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ" };
  }
}



export async function fetchOrders() {
  try {
    const orders = await prisma.order.findMany({
      include: {
        user: {
          select: {
            username: true, // ‚úÖ ‡∏î‡∏∂‡∏á username
            table: { select: { tableNumber: true } }, // ‚úÖ ‡∏î‡∏∂‡∏á tableNumber ‡πÅ‡∏ó‡∏ô tableId
          },
        },
        food: {
          select: {
            name: true,
            price: true,
          },
        },
      },
      orderBy: { createdAt: "desc" },
    });

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const formattedOrders = orders.map((order) => ({
      id: order.id,
      foodName: order.food.name,
      quantity: order.quantity,
      totalPrice: order.totalPrice,
      username: order.user?.username || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠",
      tableNumber: order.user?.table?.[0]?.tableNumber || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ï‡πä‡∏∞",
      createdAt: order.createdAt,
    }));

    return { success: true, data: formattedOrders };
  } catch (error) {
    console.error("üî¥ Error fetching orders:", error);
    return { success: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ" };
  }
}

export async function fetchOrdersUser() {
  try {
    const user = await getAuthUser();
    if (!user) {
      console.error("üî¥ Error: User is not logged in");
      return { success: false, error: "‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" };
    }

    console.log("üü¢ Authenticated User ID:", user.id);

    // ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Profile ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Clerk ID
    const profile = await prisma.profile.findUnique({
      where: { clerkId: user.id },
      select: { id: true, username: true },
    });

    if (!profile) {
      console.error("üî¥ Error: Profile not found for user:", user.id);
      return { success: false, error: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì" };
    }

    console.log("üü¢ Profile Found:", profile.id, "Username:", profile.username);

    // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
    const orders = await prisma.order.findMany({
      where: { userId: profile.id }, // ‚úÖ ‡πÉ‡∏ä‡πâ userId ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö profile
      include: {
        food: { select: { name: true, price: true } }, // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏´‡∏≤‡∏£
        user: {
          select: {
            username: true,
            table: { select: { tableNumber: true } }, // ‚úÖ ‡∏î‡∏∂‡∏á tableNumber ‡πÅ‡∏ó‡∏ô tableId
          },
        },
      },
      orderBy: { createdAt: "desc" },
    });

    console.log("üü¢ Orders Retrieved:", orders.length);

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
    const formattedOrders = orders.map((order) => ({
      id: order.id,
      foodName: order.food?.name || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠", // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö null safety
      quantity: order.quantity,
      totalPrice: order.quantity * (order.food?.price || 0), // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô error null
      username: order.user?.username || "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠", // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° username
      tableNumber: order.user?.table?.length ? order.user.table[0].tableNumber : "‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏ï‡πä‡∏∞", // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á tableNumber
      createdAt: order.createdAt,
    }));
    
    return { success: true, data: formattedOrders };
  } catch (error) {
    console.error("üî¥ Error fetching user orders:", error);
    return { success: false, error: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ" };
  }
}
