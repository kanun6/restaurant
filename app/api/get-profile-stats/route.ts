import { NextResponse } from "next/server";
import { PrismaClient } from "@prisma/client";
import { logUserActivity } from "@/actions/actions"; // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Action

// ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô PrismaClient ‡∏ã‡πâ‡∏≥‡∏ã‡πâ‡∏≠‡∏ô
const globalForPrisma = global as unknown as { prisma?: PrismaClient };
export const db = globalForPrisma.prisma || new PrismaClient();
if (process.env.NODE_ENV !== "production") globalForPrisma.prisma = db;

export async function GET() {
  try {
    console.log("üîç Fetching profile stats...");

    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å `logUserActivity()` ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const logResult = await logUserActivity();
    console.log("üîÑ logUserActivity result:", logResult);

    if (logResult?.error) {
      console.warn("‚ö†Ô∏è logUserActivity error:", logResult.error);
    }

    // ‚úÖ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const totalProfiles = await db.profile.count();

    // ‚úÖ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const newProfilesLast7Days = await db.profile.count({
      where: {
        createdAt: {
          gte: new Date(new Date().setDate(new Date().getDate() - 7)),
        },
      },
    });

    // ‚úÖ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô 7 ‡∏ß‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    const activeUsersLast7Days = await db.userActivity.count({
      where: {
        loginAt: {
          gte: new Date(new Date().setDate(new Date().getDate() - 7)),
        },
      },
    });

    console.log("üìä Profile stats:", {
      totalProfiles,
      newProfilesLast7Days,
      activeUsersLast7Days,
    });

    return NextResponse.json({
      totalProfiles,
      newProfilesLast7Days,
      activeUsersLast7Days,
    });
  } catch (error) {
    console.error("‚ùå Error fetching profile stats:", error);
    return NextResponse.json({ error: "Internal Server Error" }, { status: 500 });
  }
}
